import pytest
from unittest.mock import patch, MagicMock
import uuid
import os # For a cleaner way to specify ANTHROPIC_API_KEY for patching target

# Modules to test
from server.crud import create_course
from server.models import Course, Lesson, LessonStatus # Ensure these can be imported

# Mock environment variables before other imports if they affect module-level code
# For this test, we can also mock os.getenv directly if needed for the API key part.

# Expected structure from the agent for mocking, now including explicit links for parsing
MOCK_AGENT_MARKDOWN_OUTPUT = """
# Course Title: Mock Course Title from Agent
## Subject: Mock Subject from Agent

## Course Description
This is a mock course description generated by the agent.
It covers several interesting mock topics.

## Lessons

### Lesson 1: Mock Lesson 1 Title
Content for mock lesson 1. Includes [Mock Link 1](http://example.com/mock1) and [Another Link](http://example.com/another).
```python
# Mock Python code
print("Mock Code")
```

### Lesson 2: Mock Lesson 2 Title
Content for mock lesson 2. No explicit links in this lesson text, but could have them.
```mermaid
graph TD;
    A[Mock] --> B(Diagram);
```
"""

@pytest.fixture
def mock_db_client():
    client = MagicMock()
    execute_mock = MagicMock()
    execute_mock.data = [{
        "id": str(uuid.uuid4()), 
        "title": "Mock Course Title from Agent", 
        "subject": "Mock Subject from Agent",
        "description": "This is a mock course description generated by the agent.",
        "lessons": [
            {
                "title": "Mock Lesson 1 Title", 
                "content_md": "Content for mock lesson 1. Includes [Mock Link 1](http://example.com/mock1) and [Another Link](http://example.com/another).\n```python\n# Mock Python code\nprint(\"Mock Code\")\n```",
                "external_links": ["http://example.com/mock1", "http://example.com/another"],
                "status": LessonStatus.PENDING.value
            },
            {
                "title": "Mock Lesson 2 Title", 
                "content_md": "Content for mock lesson 2. No explicit links in this lesson text, but could have them.\n```mermaid\ngraph TD;\n    A[Mock] --> B(Diagram);\n```",
                "external_links": [],
                "status": LessonStatus.PENDING.value
            }
        ],
        "raw_generated_content_md": MOCK_AGENT_MARKDOWN_OUTPUT
    }]
    execute_mock.error = None
    
    insert_mock = MagicMock()
    insert_mock.execute.return_value = execute_mock
    
    table_mock = MagicMock()
    table_mock.insert.return_value = insert_mock
    
    client.table.return_value = table_mock
    return client

# Patching os.getenv within the server.crud module
@patch(f"{create_course.__module__}.os.getenv") 
@patch(f"{create_course.__module__}.Agent")
def test_create_course_success(mock_agent_constructor, mock_getenv, mock_db_client):
    # --- Setup Mocks ---
    mock_getenv.return_value = "fake_anthropic_api_key"

    mock_agent_instance = MagicMock()
    mock_agent_run_response = MagicMock()
    mock_agent_run_response.output = MOCK_AGENT_MARKDOWN_OUTPUT
    mock_agent_instance.run.return_value = mock_agent_run_response
    mock_agent_constructor.return_value = mock_agent_instance

    # --- Test Data ---
    test_title = "Test Course Title"
    test_subject = "Test Course Subject"

    # --- Call the function ---
    result = create_course(mock_db_client, test_title, test_subject, "easy")

    # --- Assertions ---
    mock_getenv.assert_any_call("ANTHROPIC_API_KEY")
    mock_agent_constructor.assert_called_once()
    args, kwargs = mock_agent_constructor.call_args
    assert kwargs['model'].api_key == "fake_anthropic_api_key"
    assert "claude-3-7-sonnet-20250219" in str(kwargs['model'])

    mock_agent_instance.run.assert_called_once()
    run_args, run_kwargs = mock_agent_instance.run.call_args
    assert "text" in run_kwargs
    assert test_title in run_kwargs["text"]
    assert test_subject in run_kwargs["text"]

    mock_db_client.table.assert_called_with("courses")
    insert_call_args, _ = mock_db_client.table().insert.call_args
    inserted_data = insert_call_args[0]
    
    assert inserted_data["title"] == "Mock Course Title from Agent"
    assert inserted_data["subject"] == "Mock Subject from Agent"
    assert inserted_data["description"] == "This is a mock course description generated by the agent.\nIt covers several interesting mock topics."
    assert len(inserted_data["lessons"]) == 2
    
    lesson1_data = inserted_data["lessons"][0]
    assert lesson1_data["title"] == "Mock Lesson 1 Title"
    assert "Content for mock lesson 1." in lesson1_data["content_md"]
    assert "[Mock Link 1](http://example.com/mock1)" in lesson1_data["content_md"] # Check raw content
    assert "http://example.com/mock1" in lesson1_data["external_links"]
    assert "http://example.com/another" in lesson1_data["external_links"]
    assert lesson1_data["status"] == LessonStatus.PENDING.value

    lesson2_data = inserted_data["lessons"][1]
    assert lesson2_data["title"] == "Mock Lesson 2 Title"
    assert not lesson2_data["external_links"] # Empty list for lesson 2
    assert lesson2_data["status"] == LessonStatus.PENDING.value
    
    mock_db_client.table().insert().execute.assert_called_once()

    assert result is not None
    assert result["title"] == "Mock Course Title from Agent"

@patch(f"{create_course.__module__}.os.getenv")
@patch(f"{create_course.__module__}.Agent")
def test_create_course_agent_fails(mock_agent_constructor, mock_getenv, mock_db_client):
    mock_getenv.return_value = "fake_anthropic_api_key"
    mock_agent_instance = MagicMock()
    mock_agent_instance.run.side_effect = Exception("Agent failed to generate content")
    mock_agent_constructor.return_value = mock_agent_instance

    result = create_course(mock_db_client, "Fail Test", "Failure Subject", "easy")

    assert result is None
    mock_db_client.table().insert.assert_not_called()

@patch(f"{create_course.__module__}.os.getenv")
def test_create_course_missing_api_key(mock_getenv, mock_db_client):
    mock_getenv.return_value = None

    result = create_course(mock_db_client, "API Key Test", "API Key Subject", "easy")
    assert result is None
    mock_getenv.assert_called_with("ANTHROPIC_API_KEY")

# To run these tests, you would typically use:
# pytest tests/test_crud.py
# Ensure you have pytest installed (pip install pytest pytest-mock)
# And that your project structure allows Python to find server.crud and server.models
# (e.g., by running pytest from the project root, or having proper __init__.py files if needed) 